import * as Location from 'expo-location';
import AsyncStorage from '@react-native-async-storage/async-storage';

export interface WeatherData {
  temperature: number; // Celsius
  humidity: number; // Percentage
  condition: 'sunny' | 'cloudy' | 'rainy' | 'stormy' | 'hot' | 'cool';
  uvIndex: number; // 0-11+
  windSpeed: number; // km/h
  pressure: number; // hPa
  rainProbability: number; // Percentage
  sunrise: string; // ISO string
  sunset: string; // ISO string
  location: {
    city: string;
    country: string;
    latitude: number;
    longitude: number;
  };
  fetchedAt: string; // ISO string
}

export interface WeatherForecast {
  date: string; // YYYY-MM-DD
  minTemp: number;
  maxTemp: number;
  condition: WeatherData['condition'];
  rainProbability: number;
  humidity: number;
}

export interface ThaiSeason {
  season: 'hot' | 'rainy' | 'cool'; // ‡∏§‡∏î‡∏π‡∏£‡πâ‡∏≠‡∏ô, ‡∏§‡∏î‡∏π‡∏ù‡∏ô, ‡∏§‡∏î‡∏π‡∏´‡∏ô‡∏≤‡∏ß
  monthRange: string; // "‡∏°‡∏µ‡∏ô‡∏≤‡∏Ñ‡∏° - ‡∏û‡∏§‡∏©‡∏†‡∏≤‡∏Ñ‡∏°"
  characteristics: string[];
  plantCareAdvice: string[];
}

const CACHE_KEY = '@spa/weatherCache';
const CACHE_DURATION = 60 * 60 * 1000; // 1 hour
const API_KEY = '8f3e4b2a1c9d6e7f0a8b5c2d1e9f8a3b'; // Mock API key for development

export class WeatherService {
  private static instance: WeatherService;
  private cachedWeather: WeatherData | null = null;
  private cacheTimestamp: number = 0;

  static getInstance(): WeatherService {
    if (!WeatherService.instance) {
      WeatherService.instance = new WeatherService();
    }
    return WeatherService.instance;
  }

  // Get current weather data
  async getCurrentWeather(useCache: boolean = true): Promise<WeatherData> {
    // Check cache first
    if (useCache && this.isCacheValid()) {
      return this.cachedWeather!;
    }

    try {
      // Get location permission
      const location = await this.getCurrentLocation();

      // For development, return mock data based on location
      // In production, replace with actual OpenWeatherMap API call
      const weatherData = await this.fetchWeatherData(location.latitude, location.longitude);

      // Cache the result
      this.cachedWeather = weatherData;
      this.cacheTimestamp = Date.now();
      await this.saveCacheToStorage();

      return weatherData;
    } catch (error) {
      console.error('Failed to fetch weather data:', error);

      // Try to return cached data even if expired
      if (this.cachedWeather) {
        return this.cachedWeather;
      }

      // Return default Bangkok weather as fallback
      return this.getDefaultWeatherData();
    }
  }

  // Get 5-day weather forecast
  async getWeatherForecast(): Promise<WeatherForecast[]> {
    try {
      const location = await this.getCurrentLocation();
      return await this.fetchForecastData(location.latitude, location.longitude);
    } catch (error) {
      console.error('Failed to fetch weather forecast:', error);
      return this.getDefaultForecast();
    }
  }

  // Get current Thai season information
  getCurrentThaiSeason(): ThaiSeason {
    const month = new Date().getMonth() + 1; // 1-12

    if (month >= 3 && month <= 5) {
      return {
        season: 'hot',
        monthRange: '‡∏°‡∏µ‡∏ô‡∏≤‡∏Ñ‡∏° - ‡∏û‡∏§‡∏©‡∏†‡∏≤‡∏Ñ‡∏°',
        characteristics: [
          '‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥‡∏™‡∏π‡∏á 35-40¬∞C',
          '‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏∑‡πâ‡∏ô‡∏ï‡πà‡∏≥',
          '‡πÅ‡∏™‡∏á‡πÅ‡∏î‡∏î‡∏à‡∏±‡∏î',
          '‡∏•‡∏°‡∏£‡πâ‡∏≠‡∏ô‡πÅ‡∏´‡πâ‡∏á'
        ],
        plantCareAdvice: [
          '‡∏£‡∏î‡∏ô‡πâ‡∏≥‡∏ö‡πà‡∏≠‡∏¢‡∏Ç‡∏∂‡πâ‡∏ô ‡πÄ‡∏ä‡πâ‡∏≤-‡πÄ‡∏¢‡πá‡∏ô',
          '‡∏´‡∏•‡∏µ‡∏Å‡πÄ‡∏•‡∏µ‡πà‡∏¢‡∏á‡πÅ‡∏™‡∏á‡πÅ‡∏î‡∏î‡∏ï‡∏£‡∏á‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏á',
          '‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏∑‡πâ‡∏ô‡∏î‡πâ‡∏ß‡∏¢‡∏Å‡∏≤‡∏£‡∏û‡πà‡∏ô‡∏ô‡πâ‡∏≥',
          '‡∏£‡∏∞‡∏ß‡∏±‡∏á‡πÇ‡∏£‡∏Ñ‡πÅ‡∏°‡∏•‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏¥‡∏î‡∏à‡∏≤‡∏Å‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡πâ‡∏≠‡∏ô'
        ]
      };
    } else if (month >= 6 && month <= 10) {
      return {
        season: 'rainy',
        monthRange: '‡∏°‡∏¥‡∏ñ‡∏∏‡∏ô‡∏≤‡∏¢‡∏ô - ‡∏ï‡∏∏‡∏•‡∏≤‡∏Ñ‡∏°',
        characteristics: [
          '‡∏ù‡∏ô‡∏ï‡∏Å‡∏ö‡πà‡∏≠‡∏¢',
          '‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏∑‡πâ‡∏ô‡∏™‡∏π‡∏á 80-90%',
          '‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥ 25-32¬∞C',
          '‡πÅ‡∏™‡∏á‡πÅ‡∏î‡∏î‡∏ô‡πâ‡∏≠‡∏¢'
        ],
        plantCareAdvice: [
          '‡∏•‡∏î‡∏Å‡∏≤‡∏£‡∏£‡∏î‡∏ô‡πâ‡∏≥‡∏•‡∏á',
          '‡∏£‡∏∞‡∏ö‡∏≤‡∏¢‡∏ô‡πâ‡∏≥‡πÉ‡∏´‡πâ‡∏î‡∏µ ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏ô‡πâ‡∏≥‡∏Ç‡∏±‡∏á',
          '‡∏£‡∏∞‡∏ß‡∏±‡∏á‡πÇ‡∏£‡∏Ñ‡πÄ‡∏ä‡∏∑‡πâ‡∏≠‡∏£‡∏≤‡πÅ‡∏•‡∏∞‡πÅ‡∏ö‡∏Ñ‡∏ó‡∏µ‡πÄ‡∏£‡∏µ‡∏¢',
          '‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏£‡∏∞‡∏ö‡∏≤‡∏¢‡∏≠‡∏≤‡∏Å‡∏≤‡∏®'
        ]
      };
    } else {
      return {
        season: 'cool',
        monthRange: '‡∏û‡∏§‡∏®‡∏à‡∏¥‡∏Å‡∏≤‡∏¢‡∏ô - ‡∏Å‡∏∏‡∏°‡∏†‡∏≤‡∏û‡∏±‡∏ô‡∏ò‡πå',
        characteristics: [
          '‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥‡∏ï‡πà‡∏≥ 15-25¬∞C',
          '‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏∑‡πâ‡∏ô‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á',
          '‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡πÅ‡∏´‡πâ‡∏á',
          '‡πÅ‡∏™‡∏á‡πÅ‡∏î‡∏î‡∏≠‡πà‡∏≠‡∏ô'
        ],
        plantCareAdvice: [
          '‡∏•‡∏î‡∏Å‡∏≤‡∏£‡∏£‡∏î‡∏ô‡πâ‡∏≥ ‡∏£‡∏î‡πÅ‡∏Ñ‡πà‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏î‡∏¥‡∏ô‡πÅ‡∏´‡πâ‡∏á',
          '‡∏õ‡∏Å‡∏õ‡πâ‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡∏•‡∏°‡∏´‡∏ô‡∏≤‡∏ß',
          '‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÅ‡∏™‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏û‡∏∑‡∏ä‡πÉ‡∏ö‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß',
          '‡∏´‡∏•‡∏µ‡∏Å‡πÄ‡∏•‡∏µ‡πà‡∏¢‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏™‡πà‡∏õ‡∏∏‡πã‡∏¢‡∏°‡∏≤‡∏Å‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ'
        ]
      };
    }
  }

  // Check if current weather is suitable for outdoor activities
  isGoodWeatherForPlantCare(): boolean {
    if (!this.cachedWeather) return true;

    const { temperature, condition, rainProbability, uvIndex } = this.cachedWeather;

    // Avoid outdoor plant care if:
    // - Too hot (>38¬∞C)
    // - High rain probability (>70%)
    // - Extreme UV (>9)
    // - Stormy conditions
    return !(
      temperature > 38 ||
      rainProbability > 70 ||
      uvIndex > 9 ||
      condition === 'stormy'
    );
  }

  // Get weather-based plant care recommendations
  getWeatherBasedRecommendations(): string[] {
    if (!this.cachedWeather) return [];

    const { temperature, humidity, condition, rainProbability, uvIndex } = this.cachedWeather;
    const recommendations: string[] = [];

    // Temperature-based recommendations
    if (temperature > 35) {
      recommendations.push('üå°Ô∏è ‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡∏£‡πâ‡∏≠‡∏ô‡∏°‡∏≤‡∏Å - ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏£‡∏î‡∏ô‡πâ‡∏≥‡πÅ‡∏•‡∏∞‡∏´‡∏•‡∏µ‡∏Å‡πÄ‡∏•‡∏µ‡πà‡∏¢‡∏á‡πÅ‡∏™‡∏á‡πÅ‡∏î‡∏î‡∏ï‡∏£‡∏á');
      recommendations.push('üíß ‡∏û‡πà‡∏ô‡∏ô‡πâ‡∏≥‡πÉ‡∏™‡πà‡πÉ‡∏ö‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏∑‡πâ‡∏ô');
    } else if (temperature < 18) {
      recommendations.push('‚ùÑÔ∏è ‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡πÄ‡∏¢‡πá‡∏ô - ‡∏•‡∏î‡∏Å‡∏≤‡∏£‡∏£‡∏î‡∏ô‡πâ‡∏≥‡πÅ‡∏•‡∏∞‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏•‡∏°‡∏´‡∏ô‡∏≤‡∏ß');
      recommendations.push('üè† ‡∏¢‡πâ‡∏≤‡∏¢‡∏ï‡πâ‡∏ô‡πÑ‡∏°‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏ô‡∏£‡πà‡∏°‡∏ñ‡πâ‡∏≤‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô');
    }

    // Humidity-based recommendations
    if (humidity > 80) {
      recommendations.push('üí® ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏∑‡πâ‡∏ô‡∏™‡∏π‡∏á - ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏£‡∏∞‡∏ö‡∏≤‡∏¢‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡πÄ‡∏ä‡∏∑‡πâ‡∏≠‡∏£‡∏≤');
    } else if (humidity < 40) {
      recommendations.push('üåø ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏∑‡πâ‡∏ô‡∏ï‡πà‡∏≥ - ‡∏û‡πà‡∏ô‡∏ô‡πâ‡∏≥‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏∑‡πâ‡∏ô');
    }

    // Rain-based recommendations
    if (rainProbability > 60) {
      recommendations.push('‚òî ‡∏°‡∏µ‡∏ù‡∏ô‡∏ï‡∏Å - ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏î‡∏ô‡πâ‡∏≥‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ');
      recommendations.push('üåßÔ∏è ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏£‡∏∞‡∏ö‡∏≤‡∏¢‡∏ô‡πâ‡∏≥‡πÉ‡∏ô‡∏Å‡∏£‡∏∞‡∏ñ‡∏≤‡∏á');
    }

    // UV-based recommendations
    if (uvIndex > 7) {
      recommendations.push('‚òÄÔ∏è ‡πÅ‡∏™‡∏á‡πÅ‡∏î‡∏î‡∏à‡∏±‡∏î - ‡∏¢‡πâ‡∏≤‡∏¢‡∏ï‡πâ‡∏ô‡πÑ‡∏°‡πâ‡∏ó‡∏µ‡πà‡∏ö‡∏≠‡∏ö‡∏ö‡∏≤‡∏á‡∏´‡∏•‡∏ö‡∏£‡πà‡∏°');
    }

    // Weather condition-based recommendations
    switch (condition) {
      case 'stormy':
        recommendations.push('‚õàÔ∏è ‡∏û‡∏≤‡∏¢‡∏∏‡∏ù‡∏ô‡∏ü‡πâ‡∏≤‡∏Ñ‡∏∞‡∏ô‡∏≠‡∏á - ‡∏¢‡πâ‡∏≤‡∏¢‡∏ï‡πâ‡∏ô‡πÑ‡∏°‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏ô‡∏£‡πà‡∏°');
        break;
      case 'rainy':
        recommendations.push('üåßÔ∏è ‡∏ù‡∏ô‡∏ï‡∏Å - ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ô‡πâ‡∏≥‡πÑ‡∏°‡πà‡∏Ç‡∏±‡∏á‡πÉ‡∏ô‡∏ñ‡∏≤‡∏î');
        break;
      case 'sunny':
        recommendations.push('üåû ‡πÅ‡∏™‡∏á‡πÅ‡∏î‡∏î‡∏î‡∏µ - ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏Å‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏î‡∏π‡πÅ‡∏•‡∏ï‡πâ‡∏ô‡πÑ‡∏°‡πâ');
        break;
    }

    return recommendations;
  }

  // Private methods
  private async getCurrentLocation(): Promise<{ latitude: number; longitude: number }> {
    try {
      const { status } = await Location.requestForegroundPermissionsAsync();
      if (status !== 'granted') {
        throw new Error('Location permission not granted');
      }

      const location = await Location.getCurrentPositionAsync({
        accuracy: Location.Accuracy.Balanced,
      });

      return {
        latitude: location.coords.latitude,
        longitude: location.coords.longitude,
      };
    } catch (error) {
      console.error('Failed to get location:', error);
      // Return Bangkok coordinates as default
      return {
        latitude: 13.7563,
        longitude: 100.5018,
      };
    }
  }

  private async fetchWeatherData(lat: number, lon: number): Promise<WeatherData> {
    // In production, replace with actual OpenWeatherMap API call
    // const response = await fetch(
    //   `https://api.openweathermap.org/data/2.5/weather?lat=${lat}&lon=${lon}&appid=${API_KEY}&units=metric`
    // );
    // const data = await response.json();

    // For development, return realistic mock data based on Thai weather patterns
    const season = this.getCurrentThaiSeason();
    const hour = new Date().getHours();

    let baseTemp = 28;
    let humidity = 70;
    let condition: WeatherData['condition'] = 'sunny';

    // Adjust based on season
    switch (season.season) {
      case 'hot':
        baseTemp = 32 + Math.random() * 8; // 32-40¬∞C
        humidity = 50 + Math.random() * 20; // 50-70%
        condition = Math.random() > 0.7 ? 'hot' : 'sunny';
        break;
      case 'rainy':
        baseTemp = 26 + Math.random() * 6; // 26-32¬∞C
        humidity = 75 + Math.random() * 15; // 75-90%
        condition = Math.random() > 0.4 ? 'rainy' : 'cloudy';
        break;
      case 'cool':
        baseTemp = 20 + Math.random() * 8; // 20-28¬∞C
        humidity = 60 + Math.random() * 20; // 60-80%
        condition = Math.random() > 0.6 ? 'cool' : 'cloudy';
        break;
    }

    // Adjust temperature based on time of day
    if (hour >= 6 && hour <= 18) {
      // Daytime - slightly warmer
      baseTemp += Math.random() * 3;
    } else {
      // Nighttime - cooler
      baseTemp -= Math.random() * 5;
    }

    return {
      temperature: Math.round(baseTemp * 10) / 10,
      humidity: Math.round(humidity),
      condition,
      uvIndex: condition === 'sunny' || condition === 'hot' ? 6 + Math.random() * 5 : Math.random() * 4,
      windSpeed: 5 + Math.random() * 15,
      pressure: 1010 + Math.random() * 20,
      rainProbability: condition === 'rainy' ? 70 + Math.random() * 30 : Math.random() * 40,
      sunrise: new Date().toISOString().split('T')[0] + 'T06:00:00.000Z',
      sunset: new Date().toISOString().split('T')[0] + 'T18:30:00.000Z',
      location: {
        city: 'Bangkok',
        country: 'Thailand',
        latitude: lat,
        longitude: lon,
      },
      fetchedAt: new Date().toISOString(),
    };
  }

  private async fetchForecastData(lat: number, lon: number): Promise<WeatherForecast[]> {
    // Mock 5-day forecast based on current season
    const forecast: WeatherForecast[] = [];
    const season = this.getCurrentThaiSeason();

    for (let i = 0; i < 5; i++) {
      const date = new Date();
      date.setDate(date.getDate() + i);

      let minTemp = 25;
      let maxTemp = 32;
      let condition: WeatherData['condition'] = 'sunny';
      let rainProbability = 20;

      switch (season.season) {
        case 'hot':
          minTemp = 28 + Math.random() * 4;
          maxTemp = 35 + Math.random() * 6;
          condition = Math.random() > 0.6 ? 'hot' : 'sunny';
          rainProbability = Math.random() * 30;
          break;
        case 'rainy':
          minTemp = 24 + Math.random() * 3;
          maxTemp = 30 + Math.random() * 4;
          condition = Math.random() > 0.3 ? 'rainy' : 'cloudy';
          rainProbability = 60 + Math.random() * 40;
          break;
        case 'cool':
          minTemp = 18 + Math.random() * 4;
          maxTemp = 26 + Math.random() * 5;
          condition = Math.random() > 0.5 ? 'cool' : 'cloudy';
          rainProbability = Math.random() * 40;
          break;
      }

      forecast.push({
        date: date.toISOString().split('T')[0],
        minTemp: Math.round(minTemp),
        maxTemp: Math.round(maxTemp),
        condition,
        rainProbability: Math.round(rainProbability),
        humidity: 60 + Math.random() * 30,
      });
    }

    return forecast;
  }

  private isCacheValid(): boolean {
    return (
      this.cachedWeather !== null &&
      Date.now() - this.cacheTimestamp < CACHE_DURATION
    );
  }

  private async saveCacheToStorage(): Promise<void> {
    try {
      const cacheData = {
        weather: this.cachedWeather,
        timestamp: this.cacheTimestamp,
      };
      await AsyncStorage.setItem(CACHE_KEY, JSON.stringify(cacheData));
    } catch (error) {
      console.error('Failed to save weather cache:', error);
    }
  }

  private async loadCacheFromStorage(): Promise<void> {
    try {
      const cached = await AsyncStorage.getItem(CACHE_KEY);
      if (cached) {
        const { weather, timestamp } = JSON.parse(cached);
        this.cachedWeather = weather;
        this.cacheTimestamp = timestamp;
      }
    } catch (error) {
      console.error('Failed to load weather cache:', error);
    }
  }

  private getDefaultWeatherData(): WeatherData {
    return {
      temperature: 30,
      humidity: 70,
      condition: 'sunny',
      uvIndex: 6,
      windSpeed: 10,
      pressure: 1013,
      rainProbability: 20,
      sunrise: new Date().toISOString().split('T')[0] + 'T06:00:00.000Z',
      sunset: new Date().toISOString().split('T')[0] + 'T18:30:00.000Z',
      location: {
        city: 'Bangkok',
        country: 'Thailand',
        latitude: 13.7563,
        longitude: 100.5018,
      },
      fetchedAt: new Date().toISOString(),
    };
  }

  private getDefaultForecast(): WeatherForecast[] {
    const forecast: WeatherForecast[] = [];
    for (let i = 0; i < 5; i++) {
      const date = new Date();
      date.setDate(date.getDate() + i);
      forecast.push({
        date: date.toISOString().split('T')[0],
        minTemp: 26,
        maxTemp: 32,
        condition: 'sunny',
        rainProbability: 20,
        humidity: 70,
      });
    }
    return forecast;
  }

  // Initialize weather service
  async initialize(): Promise<void> {
    await this.loadCacheFromStorage();
    // Fetch fresh weather data in background
    this.getCurrentWeather(false).catch(console.error);
  }
}

export const weatherService = WeatherService.getInstance();
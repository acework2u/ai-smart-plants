import React, { useState, useEffect } from 'react';
import {
  View,
  Text,
  ScrollView,
  StyleSheet,
  Dimensions,
  TouchableOpacity,
} from 'react-native';
import { SafeAreaView } from 'react-native-safe-area-context';
import { router } from 'expo-router';
import {
  LineChart,
  BarChart,
  PieChart,
  ProgressChart,
} from 'react-native-chart-kit';
import {
  Calendar,
  TrendingUp,
  Download,
  Filter,
  Activity,
  Droplet,
  Leaf,
} from 'lucide-react-native';

import { AppHeader, Section, Button, Chip } from '../components';
import { colors, typography, spacing } from '../core/theme';
import { useHaptic } from '../core/haptics';
import { useGardenStore } from '../stores/garden';
import { useActivityStore } from '../stores/activity';
import { useAnalyticsStore } from '../stores/analytics';

const { width: screenWidth } = Dimensions.get('window');
const chartConfig = {
  backgroundColor: colors.white,
  backgroundGradientFrom: colors.white,
  backgroundGradientTo: colors.white,
  decimalPlaces: 1,
  color: (opacity = 1) => `rgba(22, 163, 74, ${opacity})`,
  labelColor: (opacity = 1) => `rgba(107, 114, 128, ${opacity})`,
  style: {
    borderRadius: 16,
  },
  propsForDots: {
    r: '4',
    strokeWidth: '2',
    stroke: colors.primary,
  },
};

type TimeRange = 'week' | 'month' | 'year';
type AnalyticsTab = 'overview' | 'health' | 'activities' | 'trends';

export default function AnalyticsScreen() {
  const haptic = useHaptic();
  const { plants } = useGardenStore();
  const { getActivitiesByPlant } = useActivityStore();
  const {
    getHealthTrends,
    getActivityStats,
    getWateringFrequency,
    getFertilizerUsage,
    getCareConsistency,
    getPlantSuccessRate,
  } = useAnalyticsStore();

  const [timeRange, setTimeRange] = useState<TimeRange>('month');
  const [activeTab, setActiveTab] = useState<AnalyticsTab>('overview');
  const [selectedPlantId, setSelectedPlantId] = useState<string | null>(null);

  const selectedPlant = selectedPlantId ? plants.find(p => p.id === selectedPlantId) : null;

  const handleTimeRangeChange = async (range: TimeRange) => {
    await haptic.selection();
    setTimeRange(range);
  };

  const handleTabChange = async (tab: AnalyticsTab) => {
    await haptic.selection();
    setActiveTab(tab);
  };

  const handleExportData = async () => {
    await haptic.buttonPress();
    // TODO: Implement export functionality
    router.push('/export');
  };

  // Generate mock data for charts
  const generateHealthTrendData = () => {
    const labels = timeRange === 'week'
      ? ['‡∏à', '‡∏≠', '‡∏û', '‡∏û‡∏§', '‡∏®', '‡∏™', '‡∏≠‡∏≤']
      : timeRange === 'month'
      ? ['‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå 1', '‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå 2', '‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå 3', '‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå 4']
      : ['‡∏°.‡∏Ñ.', '‡∏Å.‡∏û.', '‡∏°‡∏µ.‡∏Ñ.', '‡πÄ‡∏°.‡∏¢.', '‡∏û.‡∏Ñ.', '‡∏°‡∏¥.‡∏¢.'];

    return {
      labels,
      datasets: [{
        data: selectedPlant
          ? [85, 88, 92, 89, 94, 91, 95]
          : [82, 85, 88, 86, 90, 89, 92],
        color: (opacity = 1) => `rgba(22, 163, 74, ${opacity})`,
        strokeWidth: 3,
      }],
    };
  };

  const generateActivityData = () => {
    return {
      labels: ['‡∏£‡∏î‡∏ô‡πâ‡∏≥', '‡πÉ‡∏™‡πà‡∏õ‡∏∏‡πã‡∏¢', '‡∏ï‡∏£‡∏ß‡∏à‡πÉ‡∏ö', '‡∏û‡πà‡∏ô‡∏¢‡∏≤'],
      datasets: [{
        data: selectedPlant
          ? [28, 8, 12, 3]
          : [156, 45, 67, 23],
      }],
    };
  };

  const generateWateringFrequencyData = () => {
    const days = ['‡∏à', '‡∏≠', '‡∏û', '‡∏û‡∏§', '‡∏®', '‡∏™', '‡∏≠‡∏≤'];
    return {
      labels: days,
      datasets: [{
        data: [3, 2, 4, 3, 5, 2, 4],
      }],
    };
  };

  const generateCareConsistencyData = () => {
    return {
      data: [
        {
          name: '‡∏£‡∏î‡∏ô‡πâ‡∏≥',
          population: 0.95,
          color: colors.primary,
          legendFontColor: colors.gray700,
          legendFontSize: 12,
        },
        {
          name: '‡πÉ‡∏™‡πà‡∏õ‡∏∏‡πã‡∏¢',
          population: 0.78,
          color: '#f59e0b',
          legendFontColor: colors.gray700,
          legendFontSize: 12,
        },
        {
          name: '‡∏ï‡∏£‡∏ß‡∏à‡πÉ‡∏ö',
          population: 0.85,
          color: '#8b5cf6',
          legendFontColor: colors.gray700,
          legendFontSize: 12,
        },
      ],
    };
  };

  const renderOverviewTab = () => (
    <View>
      {/* Summary Cards */}
      <Section title="‡∏™‡∏£‡∏∏‡∏õ‡∏†‡∏≤‡∏û‡∏£‡∏ß‡∏°" icon={<Activity size={20} color={colors.primary} />}>
        <View style={styles.summaryGrid}>
          <View style={styles.summaryCard}>
            <Text style={styles.summaryNumber}>
              {selectedPlant ? '1' : plants.length}
            </Text>
            <Text style={styles.summaryLabel}>‡∏ï‡πâ‡∏ô‡πÑ‡∏°‡πâ</Text>
          </View>
          <View style={styles.summaryCard}>
            <Text style={styles.summaryNumber}>
              {selectedPlant ? '41' : '291'}
            </Text>
            <Text style={styles.summaryLabel}>‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°</Text>
          </View>
          <View style={styles.summaryCard}>
            <Text style={styles.summaryNumber}>92%</Text>
            <Text style={styles.summaryLabel}>‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢</Text>
          </View>
          <View style={styles.summaryCard}>
            <Text style={styles.summaryNumber}>87%</Text>
            <Text style={styles.summaryLabel}>‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏°‡πà‡∏≥‡πÄ‡∏™‡∏°‡∏≠</Text>
          </View>
        </View>
      </Section>

      {/* Health Trend Chart */}
      <Section
        title="‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û"
        icon={<TrendingUp size={20} color={colors.primary} />}
      >
        <LineChart
          data={generateHealthTrendData()}
          width={screenWidth - spacing(8)}
          height={220}
          chartConfig={chartConfig}
          bezier
          style={styles.chart}
        />
      </Section>

      {/* Activity Distribution */}
      <Section
        title="‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏à‡∏≤‡∏¢‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°"
        icon={<Leaf size={20} color={colors.primary} />}
      >
        <BarChart
          data={generateActivityData()}
          width={screenWidth - spacing(8)}
          height={220}
          chartConfig={chartConfig}
          style={styles.chart}
          showValuesOnTopOfBars
        />
      </Section>
    </View>
  );

  const renderHealthTab = () => (
    <View>
      <Section title="‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡∏ï‡πâ‡∏ô‡πÑ‡∏°‡πâ" icon={<Activity size={20} color={colors.primary} />}>
        <LineChart
          data={generateHealthTrendData()}
          width={screenWidth - spacing(8)}
          height={220}
          chartConfig={chartConfig}
          bezier
          style={styles.chart}
        />

        <View style={styles.healthInsights}>
          <Text style={styles.insightTitle}>‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ä‡∏¥‡∏á‡∏•‡∏∂‡∏Å</Text>
          <Text style={styles.insightText}>
            ‚Ä¢ ‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡∏ï‡πâ‡∏ô‡πÑ‡∏°‡πâ‡∏î‡∏µ‡∏Ç‡∏∂‡πâ‡∏ô 8% ‡πÉ‡∏ô‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡∏ú‡πà‡∏≤‡∏ô‡∏°‡∏≤
          </Text>
          <Text style={styles.insightText}>
            ‚Ä¢ ‡∏ï‡πâ‡∏ô‡πÑ‡∏°‡πâ‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏î‡∏π‡πÅ‡∏•‡∏™‡∏°‡πà‡∏≥‡πÄ‡∏™‡∏°‡∏≠‡∏°‡∏µ‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡∏î‡∏µ‡∏Å‡∏ß‡πà‡∏≤ 15%
          </Text>
          <Text style={styles.insightText}>
            ‚Ä¢ ‡∏ä‡πà‡∏ß‡∏á‡∏§‡∏î‡∏π‡∏ù‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏∞‡∏ß‡∏±‡∏á‡πÇ‡∏£‡∏Ñ‡πÄ‡∏ä‡∏∑‡πâ‡∏≠‡∏£‡∏≤‡∏°‡∏≤‡∏Å‡∏Ç‡∏∂‡πâ‡∏ô
          </Text>
        </View>
      </Section>
    </View>
  );

  const renderActivitiesTab = () => (
    <View>
      {/* Watering Frequency */}
      <Section
        title="‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏µ‡πà‡∏Å‡∏≤‡∏£‡∏£‡∏î‡∏ô‡πâ‡∏≥"
        icon={<Droplet size={20} color={colors.primary} />}
      >
        <BarChart
          data={generateWateringFrequencyData()}
          width={screenWidth - spacing(8)}
          height={220}
          chartConfig={chartConfig}
          style={styles.chart}
        />
      </Section>

      {/* Care Consistency */}
      <Section
        title="‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏°‡πà‡∏≥‡πÄ‡∏™‡∏°‡∏≠‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏π‡πÅ‡∏•"
        icon={<Calendar size={20} color={colors.primary} />}
      >
        <ProgressChart
          data={generateCareConsistencyData()}
          width={screenWidth - spacing(8)}
          height={220}
          strokeWidth={16}
          radius={32}
          chartConfig={chartConfig}
          hideLegend={false}
          style={styles.chart}
        />
      </Section>

      {/* Activity Statistics */}
      <Section title="‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°">
        <View style={styles.statsList}>
          <View style={styles.statRow}>
            <Text style={styles.statLabel}>‡∏Å‡∏≤‡∏£‡∏£‡∏î‡∏ô‡πâ‡∏≥‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢:</Text>
            <Text style={styles.statValue}>3.2 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á/‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå</Text>
          </View>
          <View style={styles.statRow}>
            <Text style={styles.statLabel}>‡∏Å‡∏≤‡∏£‡πÉ‡∏™‡πà‡∏õ‡∏∏‡πã‡∏¢:</Text>
            <Text style={styles.statValue}>1.1 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á/‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå</Text>
          </View>
          <View style={styles.statRow}>
            <Text style={styles.statLabel}>‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û:</Text>
            <Text style={styles.statValue}>1.9 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á/‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå</Text>
          </View>
          <View style={styles.statRow}>
            <Text style={styles.statLabel}>‡∏õ‡∏£‡∏¥‡∏°‡∏≤‡∏ì‡∏ô‡πâ‡∏≥‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢:</Text>
            <Text style={styles.statValue}>245 ml/‡∏Ñ‡∏£‡∏±‡πâ‡∏á</Text>
          </View>
        </View>
      </Section>
    </View>
  );

  const renderTrendsTab = () => (
    <View>
      <Section title="‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡πÅ‡∏•‡∏∞‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå" icon={<TrendingUp size={20} color={colors.primary} />}>
        <View style={styles.trendsList}>
          <View style={styles.trendItem}>
            <View style={styles.trendIcon}>
              <Text style={styles.trendEmoji}>üìà</Text>
            </View>
            <View style={styles.trendContent}>
              <Text style={styles.trendTitle}>‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡∏î‡∏µ‡∏Ç‡∏∂‡πâ‡∏ô‡∏ï‡πà‡∏≠‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á</Text>
              <Text style={styles.trendDescription}>
                ‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡∏ï‡πâ‡∏ô‡πÑ‡∏°‡πâ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡∏∂‡πâ‡∏ô 12% ‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á 3 ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡∏ú‡πà‡∏≤‡∏ô‡∏°‡∏≤
              </Text>
            </View>
          </View>

          <View style={styles.trendItem}>
            <View style={styles.trendIcon}>
              <Text style={styles.trendEmoji}>üíß</Text>
            </View>
            <View style={styles.trendContent}>
              <Text style={styles.trendTitle}>‡∏Å‡∏≤‡∏£‡∏£‡∏î‡∏ô‡πâ‡∏≥‡∏°‡∏µ‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û</Text>
              <Text style={styles.trendDescription}>
                ‡∏•‡∏î‡∏õ‡∏£‡∏¥‡∏°‡∏≤‡∏ì‡∏ô‡πâ‡∏≥‡∏•‡∏á 18% ‡πÅ‡∏ï‡πà‡∏ï‡πâ‡∏ô‡πÑ‡∏°‡πâ‡∏¢‡∏±‡∏á‡∏Ñ‡∏á‡∏°‡∏µ‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡∏î‡∏µ
              </Text>
            </View>
          </View>

          <View style={styles.trendItem}>
            <View style={styles.trendIcon}>
              <Text style={styles.trendEmoji}>‚ö†Ô∏è</Text>
            </View>
            <View style={styles.trendContent}>
              <Text style={styles.trendTitle}>‡∏Ñ‡∏≥‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏§‡∏î‡∏π‡∏ù‡∏ô</Text>
              <Text style={styles.trendDescription}>
                ‡∏Ñ‡∏ß‡∏£‡∏•‡∏î‡∏Å‡∏≤‡∏£‡∏£‡∏î‡∏ô‡πâ‡∏≥ 30% ‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á‡∏§‡∏î‡∏π‡∏ù‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏°‡∏≤‡∏ñ‡∏∂‡∏á
              </Text>
            </View>
          </View>

          <View style={styles.trendItem}>
            <View style={styles.trendIcon}>
              <Text style={styles.trendEmoji}>üèÜ</Text>
            </View>
            <View style={styles.trendContent}>
              <Text style={styles.trendTitle}>‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏°‡πà‡∏≥‡πÄ‡∏™‡∏°‡∏≠</Text>
              <Text style={styles.trendDescription}>
                ‡∏≠‡∏µ‡∏Å 3% ‡∏Ñ‡∏∏‡∏ì‡∏à‡∏∞‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö Badge "‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏°‡∏∑‡∏≠‡∏≠‡∏≤‡∏ä‡∏µ‡∏û"
              </Text>
            </View>
          </View>
        </View>
      </Section>
    </View>
  );

  return (
    <SafeAreaView style={styles.container}>
      <AppHeader
        title="‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÅ‡∏•‡∏∞‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥"
        back
        onBack={() => router.back()}
        right={
          <TouchableOpacity onPress={handleExportData}>
            <Download size={24} color={colors.primary} />
          </TouchableOpacity>
        }
      />

      {/* Filter Controls */}
      <View style={styles.controls}>
        {/* Plant Filter */}
        <ScrollView
          horizontal
          showsHorizontalScrollIndicator={false}
          style={styles.plantFilter}
        >
          <Chip
            label="‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"
            active={selectedPlantId === null}
            onPress={() => setSelectedPlantId(null)}
            style={styles.filterChip}
          />
          {plants.map((plant) => (
            <Chip
              key={plant.id}
              label={plant.name}
              active={selectedPlantId === plant.id}
              onPress={() => setSelectedPlantId(plant.id)}
              style={styles.filterChip}
            />
          ))}
        </ScrollView>

        {/* Time Range Filter */}
        <View style={styles.timeRangeFilter}>
          {(['week', 'month', 'year'] as TimeRange[]).map((range) => (
            <Chip
              key={range}
              label={range === 'week' ? '‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå' : range === 'month' ? '‡πÄ‡∏î‡∏∑‡∏≠‡∏ô' : '‡∏õ‡∏µ'}
              active={timeRange === range}
              onPress={() => handleTimeRangeChange(range)}
              style={styles.timeChip}
            />
          ))}
        </View>
      </View>

      {/* Tab Navigation */}
      <View style={styles.tabContainer}>
        <ScrollView horizontal showsHorizontalScrollIndicator={false}>
          {[
            { key: 'overview', label: '‡∏†‡∏≤‡∏û‡∏£‡∏ß‡∏°', icon: 'üìä' },
            { key: 'health', label: '‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û', icon: 'üå±' },
            { key: 'activities', label: '‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°', icon: 'üìÖ' },
            { key: 'trends', label: '‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°', icon: 'üìà' },
          ].map((tab) => (
            <TouchableOpacity
              key={tab.key}
              style={[styles.tab, activeTab === tab.key && styles.activeTab]}
              onPress={() => handleTabChange(tab.key as AnalyticsTab)}
            >
              <Text style={styles.tabEmoji}>{tab.icon}</Text>
              <Text style={[styles.tabLabel, activeTab === tab.key && styles.activeTabLabel]}>
                {tab.label}
              </Text>
            </TouchableOpacity>
          ))}
        </ScrollView>
      </View>

      {/* Content */}
      <ScrollView style={styles.content} showsVerticalScrollIndicator={false}>
        {activeTab === 'overview' && renderOverviewTab()}
        {activeTab === 'health' && renderHealthTab()}
        {activeTab === 'activities' && renderActivitiesTab()}
        {activeTab === 'trends' && renderTrendsTab()}

        <View style={styles.spacer} />
      </ScrollView>
    </SafeAreaView>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: colors.white,
  },
  controls: {
    paddingHorizontal: spacing(4),
    paddingVertical: spacing(3),
    borderBottomWidth: 1,
    borderBottomColor: colors.gray200,
  },
  plantFilter: {
    marginBottom: spacing(3),
  },
  filterChip: {
    marginRight: spacing(2),
  },
  timeRangeFilter: {
    flexDirection: 'row',
    justifyContent: 'space-between',
  },
  timeChip: {
    flex: 1,
    marginHorizontal: spacing(1),
  },
  tabContainer: {
    borderBottomWidth: 1,
    borderBottomColor: colors.gray200,
  },
  tab: {
    paddingHorizontal: spacing(4),
    paddingVertical: spacing(3),
    alignItems: 'center',
    minWidth: 80,
  },
  activeTab: {
    borderBottomWidth: 2,
    borderBottomColor: colors.primary,
  },
  tabEmoji: {
    fontSize: 20,
    marginBottom: spacing(1),
  },
  tabLabel: {
    fontSize: 12,
    color: colors.gray600,
    fontFamily: typography.fontFamily,
    fontWeight: '500' as any,
  },
  activeTabLabel: {
    color: colors.primary,
    fontWeight: '600' as any,
  },
  content: {
    flex: 1,
    paddingHorizontal: spacing(4),
  },
  chart: {
    marginVertical: spacing(2),
    borderRadius: 16,
  },
  summaryGrid: {
    flexDirection: 'row',
    flexWrap: 'wrap',
    justifyContent: 'space-between',
  },
  summaryCard: {
    width: '48%',
    backgroundColor: colors.primarySoft,
    borderRadius: 12,
    padding: spacing(4),
    alignItems: 'center',
    marginBottom: spacing(3),
  },
  summaryNumber: {
    fontSize: 28,
    fontWeight: 'bold' as any,
    color: colors.primary,
    fontFamily: typography.fontFamily,
  },
  summaryLabel: {
    fontSize: 14,
    color: colors.gray700,
    fontFamily: typography.fontFamily,
    marginTop: spacing(1),
  },
  healthInsights: {
    marginTop: spacing(4),
    padding: spacing(4),
    backgroundColor: colors.gray50,
    borderRadius: 12,
  },
  insightTitle: {
    fontSize: 16,
    fontWeight: '600' as any,
    color: colors.gray900,
    fontFamily: typography.fontFamily,
    marginBottom: spacing(2),
  },
  insightText: {
    fontSize: 14,
    color: colors.gray700,
    fontFamily: typography.fontFamily,
    lineHeight: 20,
    marginBottom: spacing(1),
  },
  statsList: {
    marginTop: spacing(2),
  },
  statRow: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    paddingVertical: spacing(3),
    borderBottomWidth: 1,
    borderBottomColor: colors.gray200,
  },
  statLabel: {
    fontSize: 14,
    color: colors.gray700,
    fontFamily: typography.fontFamily,
  },
  statValue: {
    fontSize: 14,
    fontWeight: '600' as any,
    color: colors.gray900,
    fontFamily: typography.fontFamily,
  },
  trendsList: {
    marginTop: spacing(2),
  },
  trendItem: {
    flexDirection: 'row',
    padding: spacing(4),
    backgroundColor: colors.gray50,
    borderRadius: 12,
    marginBottom: spacing(3),
  },
  trendIcon: {
    width: 48,
    height: 48,
    borderRadius: 24,
    backgroundColor: colors.white,
    alignItems: 'center',
    justifyContent: 'center',
    marginRight: spacing(3),
  },
  trendEmoji: {
    fontSize: 24,
  },
  trendContent: {
    flex: 1,
  },
  trendTitle: {
    fontSize: 16,
    fontWeight: '600' as any,
    color: colors.gray900,
    fontFamily: typography.fontFamily,
    marginBottom: spacing(1),
  },
  trendDescription: {
    fontSize: 14,
    color: colors.gray600,
    fontFamily: typography.fontFamily,
    lineHeight: 20,
  },
  spacer: {
    height: spacing(6),
  },
});